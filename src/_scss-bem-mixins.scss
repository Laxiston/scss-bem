$bem-block-prefix: '' !default;
$bem-element-prefix: '__' !default;
$bem-modifier-prefix: '_' !default;

@function get-block-name($selector) {
  $selector: #{$selector};

  $start-index: str_index($selector, '.');
  @if $start-index == null {
    @error 'You should pass className to this function (Should started from "." symbol) or just "&" if it\'s used on non-root level. Passed value "#{$originSelector}"';
  }
  $start-index: $start-index + 1;

  $end-index: str_length($selector);
  $end-index-element: str_index($selector, $bem-element-prefix);
  $end-index-modifier: str_index($selector, $bem-modifier-prefix);
  @if $end-index-element != null  {
    $end-index: $end-index-element - 1;
  } @else if $end-index-modifier != null {
    $end-index: $end-index-modifier - 1;
  }

  @return str_slice($selector, $start-index, $end-index);
}

@mixin block($block-name) {
  .#{$bem-block-prefix}#{$block-name} {
    @content
  }
}

@mixin element($element-name) {
  &#{$bem-element-prefix}#{$element-name} {
    @content
  }
}

@mixin modifier($modifier-name, $modifier-value: null) {
  @if $modifier-value != null {
    &#{$bem-modifier-prefix}#{$modifier-name}#{$bem-modifier-prefix}#{$modifier-value} {
      @content
    }
  }
  @else {
    &#{$bem-modifier-prefix}#{$modifier-name} {
      @content
    }
  }
}

@mixin state($state-name) {
  &#{$bem-modifier-prefix}state#{$bem-modifier-prefix}#{$state-name} {
    @content
  }
}

@mixin contains($element-name) {
  $block-name: get-block-name(&);

  .#{$block-name}#{$bem-element-prefix}#{$element-name} {
    @content
  }
}